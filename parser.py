import os
import requests
from bs4 import BeautifulSoup
from loguru import logger
import openai
import re

# --- API –∫–ª—é—á–∏ ---
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

if not OPENAI_API_KEY:
    logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è OPENAI_API_KEY.")
    exit()
if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
    logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID.")
    exit()

# --- OpenAI –∫–ª–∏–µ–Ω—Ç (v1.x API) ---
client = openai.OpenAI(api_key=OPENAI_API_KEY)

# --- GPT –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ ---
def rewrite_text_with_gpt_tr(text, title, keywords=None):
    keywords = keywords or [
        "futbol", "spor haberleri", "transfer", "a spor izle", "a spor canlƒ± izle",
        "son dakika spor", "a spor canlƒ±", "Canlƒ± ma√ß izle", "spor ekranƒ±"
    ]

    prompt = f"""
Sen profesyonel bir T√ºrk spor gazetecisisin. A≈üaƒüƒ±daki haberi %100 √∂zg√ºn, SEO uyumlu, doƒüal ve etkileyici bir ≈üekilde yeniden yazmanƒ± istiyorum.

Kurallar:
- Lead, ƒ∞√ßerik ve Kapanƒ±≈ü ba≈ülƒ±klarƒ± olsun.
- Ba≈ülƒ±k: {title}
- Anahtar kelimeler ≈üu ≈üekilde doƒüal bi√ßimde ge√ßmeli: {', '.join(keywords)}
- Minimum 2500 karakter √ºret, tercihen 3500'e yakƒ±n.
- Etiketleri (Lead:, ƒ∞√ßerik:, Kapanƒ±≈ü:) koru.

Metin:
\"\"\"
{text.strip()}
\"\"\"
"""

    try:
        logger.info(f"‚è≥ GPT ile yeniden yazƒ±lƒ±yor... ({len(text)} karakter)")
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.6,
            max_tokens=3000
        )

        rewritten = response.choices[0].message.content.strip()
        logger.debug(f"üì§ GPT-–æ—Ç–≤–µ—Ç:\n{rewritten[:1000]}...")

        if rewritten == text.strip():
            logger.warning("‚ö†Ô∏è GPT –≤–µ—Ä–Ω—É–ª —Ç–æ—Ç –∂–µ —Ç–µ–∫—Å—Ç ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.")
        else:
            logger.success("‚úÖ GPT —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–ø–∏—Å–∞–ª —Ç–µ–∫—Å—Ç.")

        return rewritten

    except Exception as e:
        logger.error(f"‚ùå GPT hatasƒ±: {e}")
        return "[GPT HATASI] " + text[:3500]

# --- Telegram –æ—Ç–ø—Ä–∞–≤–∫–∞ ---
def send_to_telegram(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": text,
        "parse_mode": "HTML"
    }
    try:
        response = requests.post(url, data=payload, timeout=10)
        if response.status_code == 200:
            logger.success("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.")
            return True
        else:
            logger.error(f"‚ùå Telegram –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}")
            return False
    except requests.RequestException as e:
        logger.error(f"‚ùå Telegram —Å–µ—Ç—å: {e}")
        return False

# --- Telegram —Ñ–æ—Ä–º–∞—Ç ---
def format_for_telegram(gpt_text, title, url):
    clean = re.sub(r'</?(h\d|div|span|table|tr|td|style|script)[^>]*>', '', gpt_text).strip()
    message = f"<b>{title}</b>\n\n{clean}\n\n<a href='{url}'>Kaynak</a>"
    return message[:4096]

# --- –ü–∞—Ä—Å–∏–Ω–≥ Ajansspor ---
def parse_ajansspor_latest_news(base_url):
    logger.info(f"üîç –ü–∞—Ä—Å–∏–Ω–≥: {base_url}")
    try:
        response = requests.get(base_url, timeout=15)
        response.raise_for_status()
    except requests.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return None, None

    soup = BeautifulSoup(response.content, 'html.parser')
    first_card = soup.find('div', class_='card')
    if not first_card:
        logger.warning("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –±–ª–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏.")
        return None, None

    link_tag = first_card.find('a', href=True)
    if not link_tag:
        logger.warning("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞.")
        return None, None

    news_link = f"https://ajansspor.com{link_tag['href']}"
    return get_news_details(news_link)

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ ---
def get_news_details(news_url):
    logger.info(f"üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏: {news_url}")
    try:
        resp = requests.get(news_url, timeout=15)
        resp.raise_for_status()
    except requests.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—å–∏: {e}")
        return None, None

    soup = BeautifulSoup(resp.content, 'html.parser')
    title_tag = soup.find('header', class_='news-header')
    title = title_tag.get_text(strip=True) if title_tag else "Ba≈ülƒ±ksƒ±z"

    content = []
    for block in soup.find_all('div', class_='article-content'):
        article = block.find('article')
        if article:
            for p in article.find_all('p'):
                text = p.get_text(strip=True)
                if text:
                    content.append(text)

    full_text = "\n".join(content)

    if not full_text:
        logger.warning("‚ùå –°—Ç–∞—Ç—å—è –ø—É—Å—Ç–∞.")
        return None, None

    rewritten = rewrite_text_with_gpt_tr(full_text, title)
    message = format_for_telegram(rewritten, title, news_url)
    return message, news_url

# --- –ì–ª–∞–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---
def main():
    last_link_file = 'last_link.txt'
    last_sent = ""
    try:
        with open(last_link_file, 'r') as f:
            last_sent = f.read().strip()
            logger.info(f"üìÅ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Å—ã–ª–∫–∞: {last_sent}")
    except FileNotFoundError:
        logger.info("üìÅ last_link.txt –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    url = "https://ajansspor.com/kategori/16/futbol"
    message, new_link = parse_ajansspor_latest_news(url)

    if not new_link:
        logger.info("üì≠ –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    if new_link == last_sent:
        logger.info("‚ôªÔ∏è –°—Ç–∞—Ç—å—è —É–∂–µ –ø—É–±–ª–∏–∫–æ–≤–∞–ª–∞—Å—å. –ü—Ä–æ–ø—É—Å–∫.")
    else:
        logger.info(f"üöÄ –ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è: {new_link}")
        if send_to_telegram(message):
            with open(last_link_file, 'w') as f:
                f.write(new_link)
            logger.success("‚úÖ –°—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

if __name__ == "__main__":
    main()

import os
import requests
from bs4 import BeautifulSoup
from loguru import logger
import openai
import re

# --- API –ö–õ–Æ–ß–ò ---
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ ---
if not OPENAI_API_KEY:
    logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω OPENAI_API_KEY.")
    exit()
if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
    logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID.")
    exit()

openai.api_key = OPENAI_API_KEY

# --- GPT –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ ---
def rewrite_text_with_gpt_tr(text, title, keywords=None):
    keywords = keywords or [
        "futbol", "spor haberleri", "transfer", "a spor izle", "a spor canlƒ± izle",
        "son dakika spor", "a spor canlƒ±", "Canlƒ± ma√ß izle", "spor ekranƒ±"
    ]

    prompt = f"""
Sen T√ºrkiye'de spor haberciliƒüi yapan profesyonel bir gazetecisin.
A≈üaƒüƒ±daki haberi %100 √∂zg√ºn, SEO uyumlu ve etkileyici ≈üekilde yeniden yaz.

‚úçÔ∏è Kurallar:
- ƒ∞lk paragraf Lead: dikkat √ßekici, √∂zetleyici
- ƒ∞√ßerik: 3‚Äì5 kƒ±sa paragrafta t√ºm detaylar
- Kapanƒ±≈ü: toparlayan, beklenti olu≈üturan c√ºmle
- Anahtar kelimeler doƒüal ≈üekilde ge√ßsin: {', '.join(keywords)}
- En az 2500 karakter √ºret. ƒ∞√ßeriƒüi kƒ±sa kesme.
- Etiketleri koru: Ba≈ülƒ±k:, Lead:, ƒ∞√ßerik:, Kapanƒ±≈ü:

Ba≈ülƒ±k: {title}

Metin:
\"\"\"
{text.strip()}
\"\"\"
"""

    try:
        logger.info("‚úèÔ∏è GPT –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—å—é...")
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.6,
            max_tokens=2048
        )
        content = response['choices'][0]['message']['content'].strip()
        return content
    except Exception as e:
        logger.error(f" GPT –æ—à–∏–±–∫–∞: {e}")
        return text[:3500]

# --- Telegram –æ—Ç–ø—Ä–∞–≤–∫–∞ ---
def send_to_telegram(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": text,
        "parse_mode": "HTML"
    }
    try:
        response = requests.post(url, data=payload, timeout=10)
        if response.status_code == 200:
            logger.success("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.")
            return True
        else:
            logger.error(f" Telegram –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}")
            return False
    except requests.RequestException as e:
        logger.error(f" –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ Telegram: {e}")
        return False

# --- HTML –æ—á–∏—Å—Ç–∫–∞ –∏ Telegram —Ñ–æ—Ä–º–∞—Ç ---
def format_for_telegram(gpt_text, title, url):
    clean = re.sub(r'</?(h\d|div|span|table|tr|td|style|script)[^>]*>', '', gpt_text).strip()
    message = f"<b>{title}</b>\n\n{clean}\n\n<a href='{url}'>Kaynak</a>"
    return message[:4096]

# --- –ü–∞—Ä—Å–∏–Ω–≥ Ajansspor ---
def parse_ajansspor_latest_news(base_url):
    logger.info(f"üîé –ü–∞—Ä—Å–∏–Ω–≥: {base_url}")
    try:
        response = requests.get(base_url, timeout=15)
        response.raise_for_status()
    except requests.RequestException as e:
        logger.error(f" –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None, None

    soup = BeautifulSoup(response.content, 'html.parser')
    first_card = soup.find('div', class_='card')
    if not first_card:
        logger.warning("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –±–ª–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏.")
        return None, None

    link_tag = first_card.find('a', href=True)
    if not link_tag:
        logger.warning("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞.")
        return None, None

    news_link = f"https://ajansspor.com{link_tag['href']}"
    return get_news_details(news_link)

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ ---
def get_news_details(news_url):
    logger.info(f"üìÑ –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å—é: {news_url}")
    try:
        resp = requests.get(news_url, timeout=15)
        resp.raise_for_status()
    except requests.RequestException as e:
        logger.error(f" –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—å–∏: {e}")
        return None, None

    soup = BeautifulSoup(resp.content, 'html.parser')
    title_tag = soup.find('header', class_='news-header')
    title = title_tag.get_text(strip=True) if title_tag else "Ba≈ülƒ±ksƒ±z"

    content = []
    for block in soup.find_all('div', class_='article-content'):
        article = block.find('article')
        if article:
            for p in article.find_all('p'):
                text = p.get_text(strip=True)
                if text:
                    content.append(text)

    full_text = "\n".join(content)
    if not full_text:
        logger.warning(" –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç.")
        return None, None

    rewritten = rewrite_text_with_gpt_tr(full_text, title)
    message = format_for_telegram(rewritten, title, news_url)
    return message, news_url

# --- –ì–ª–∞–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---
def main():
    last_link_file = 'last_link.txt'
    last_sent = ""
    try:
        with open(last_link_file, 'r') as f:
            last_sent = f.read().strip()
            logger.info(f"üìÅ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Å—ã–ª–∫–∞: {last_sent}")
    except FileNotFoundError:
        logger.info("üìÅ –§–∞–π–ª —Å—Å—ã–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    url = "https://ajansspor.com/kategori/16/futbol"
    message, new_link = parse_ajansspor_latest_news(url)

    if not new_link:
        logger.info("üì≠ –ù–µ—Ç –Ω–æ–≤–æ–π —Å—Ç–∞—Ç—å–∏.")
        return

    if new_link == last_sent:
        logger.info("‚ôªÔ∏è –ù–æ–≤–æ—Å—Ç—å —É–∂–µ –±—ã–ª–∞. –ü—Ä–æ–ø—É—Å–∫.")
    else:
        logger.info(f"üöÄ –ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å: {new_link}")
        if send_to_telegram(message):
            with open(last_link_file, 'w') as f:
                f.write(new_link)
            logger.success("‚úÖ –°—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

if __name__ == "__main__":
    main()

import os
import requests
from bs4 import BeautifulSoup
from loguru import logger
import openai

# --- API –∫–ª—é—á–∏ ---
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π ---
if not OPENAI_API_KEY:
    logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è OPENAI_API_KEY.")
    exit()
if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
    logger.error("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID.")
    exit()

openai.api_key = OPENAI_API_KEY
def rewrite_text_with_gpt_tr(text, title, keywords=None):
    keywords = keywords or ["futbol", "spor haberleri", "transfer", "a spor izle", "a spor canlƒ± izle", "son dakika spor", "a spor canlƒ±", "Canlƒ± ma√ß izle", "spor ekranƒ±"]
    limited_text = text[:4000]


    prompt = f"""
A≈üaƒüƒ±daki haberi %100 √∂zg√ºn, SEO uyumlu ve yapƒ±landƒ±rƒ±lmƒ±≈ü ≈üekilde yeniden yazmanƒ± istiyorum.

√áƒ±ktƒ± formatƒ± **kesinlikle** a≈üaƒüƒ±daki gibi olmalƒ±:

Ba≈ülƒ±k: {title}

Lead: [Haberin √∂zeti ‚Äî dikkat √ßekici, tƒ±klamaya te≈üvik edici bir paragraf]

ƒ∞√ßerik:
[Haberin detaylarƒ± ‚Äî paragraflara b√∂l√ºnm√º≈ü, doƒüal ve akƒ±cƒ± bir anlatƒ±m]

Kapanƒ±≈ü: [Genel bir deƒüerlendirme veya geli≈üme beklentisiyle kapanƒ±≈ü c√ºmlesi]

Kurallar:
- Ba≈ülƒ±ƒüƒ± deƒüi≈ütirme.
- Yanƒ±t en az 2500 karakter uzunluƒüunda olmalƒ±, tercihen 3500'e yakƒ±n. Metni kƒ±sa kesme.
- Yazƒ±m dili profesyonel, gazeteci √ºslubunda olsun.
- Anahtar kelimeleri ≈üu ≈üekilde metne entegre et: {', '.join(keywords)}
- Yazƒ±nƒ±n anlamƒ±nƒ± koru, ama c√ºmleleri √∂zg√ºn hale getir.
- Her b√∂l√ºm√º a√ßƒ±k√ßa etiketle (Lead:, ƒ∞√ßerik:, Kapanƒ±≈ü:) ‚Äî bunlar mutlaka g√∂r√ºns√ºn!

Metin:
\"\"\"
{limited_text}
\"\"\"
"""

    try:
        logger.info("‚è≥ OpenAI GPT ile metin yeniden yazƒ±lƒ±yor (TR + SEO)...")
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.5,
            max_tokens=2048
        )
        return response['choices'][0]['message']['content'].strip()
    except Exception as e:
        logger.error(f"‚ùå GPT hatasƒ±: {e}")
        return text[:3990]  # fallback


# --- Telegram –æ—Ç–ø—Ä–∞–≤–∫–∞ ---
def send_to_telegram(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": text,
        "parse_mode": "HTML"
    }
    try:
        response = requests.post(url, data=payload, timeout=10)
        if response.status_code == 200:
            logger.success("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {response.status_code} - {response.text}")
            return False
    except requests.RequestException as e:
        logger.error(f"‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
        return False

# --- –ü–∞—Ä—Å–∏–Ω–≥ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
def parse_ajansspor_latest_news(base_url):
    logger.info(f"–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–∞: {base_url}")
    try:
        response = requests.get(base_url, timeout=15)
        response.raise_for_status()
    except requests.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return None, None

    soup = BeautifulSoup(response.content, 'html.parser')
    first_card = soup.find('div', class_='card')
    if not first_card:
        logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –±–ª–æ–∫ —Å –Ω–æ–≤–æ—Å—Ç—å—é –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
        return None, None

    link_tag = first_card.find('a', href=True)
    if not link_tag:
        logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –≤ –±–ª–æ–∫–µ —Å –Ω–æ–≤–æ—Å—Ç—å—é.")
        return None, None

    news_relative_link = link_tag['href']
    full_news_url = f"https://ajansspor.com{news_relative_link}"

    return get_news_details(full_news_url)

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ ---
def get_news_details(news_url):
    logger.info(f"üîç –ü–∞—Ä—Å–∏–º –Ω–æ–≤–æ—Å—Ç—å: {news_url}")
    try:
        news_response = requests.get(news_url, timeout=15)
        news_response.raise_for_status()
    except requests.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏: {e}")
        return None, None

    news_soup = BeautifulSoup(news_response.content, 'html.parser')

    header_tag = news_soup.find('header', class_='news-header')
    title = header_tag.get_text(strip=True) if header_tag else "Ba≈ülƒ±ksƒ±z"

    article_texts = []
    article_blocks = news_soup.find_all('div', class_='article-content')
    for block in article_blocks:
        article_tag = block.find('article')
        if article_tag:
            for p in article_tag.find_all('p'):
                text = p.get_text(strip=True)
                if text:
                    article_texts.append(text)

    full_text = "\n".join(article_texts)

    keywords = ["futbol", "Ajansspor", "spor haberleri", "transfer haberleri"]
    rewritten_text = rewrite_text_with_gpt_tr(full_text, title, keywords)

    telegram_text = rewritten_text[:3500]
    message = f"<b>{title}</b>\n\n{telegram_text}\n\n<a href='{news_url}'>Kaynak</a>"
    return message, news_url

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    last_link_file = 'last_link.txt'
    last_sent_link = ""
    try:
        with open(last_link_file, 'r') as f:
            last_sent_link = f.read().strip()
            logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Å—ã–ª–∫–∞: {last_sent_link}")
    except FileNotFoundError:
        logger.info("–§–∞–π–ª —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Å—ã–ª–∫–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫.")

    url = "https://ajansspor.com/kategori/16/futbol"
    message, new_link = parse_ajansspor_latest_news(url)

    if not new_link:
        logger.info("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É. –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É.")
        return

    if new_link == last_sent_link:
        logger.info("üî• –ù–æ–≤–æ—Å—Ç—å —Ç–∞ –∂–µ, —á—Ç–æ –∏ –≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
    else:
        logger.info(f"üöÄ –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å! –°—Å—ã–ª–∫–∞: {new_link}")
        if send_to_telegram(message):
            with open(last_link_file, 'w') as f:
                f.write(new_link)
            logger.success("–ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª.")

if __name__ == "__main__":
    main()

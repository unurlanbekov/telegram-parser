import os
import requests
from bs4 import BeautifulSoup
from loguru import logger
import openai


OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')


if not OPENAI_API_KEY:
    logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è OPENAI_API_KEY.")
    exit()
if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
    logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ TELEGRAM_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID.")
    exit()

openai.api_key = OPENAI_API_KEY

# --- –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏ ---
def split_text(text, chunk_size=3000):
    return [text[i:i + chunk_size] for i in range(0, len(text), chunk_size)]


def rewrite_text_with_gpt_tr(text, title, keywords=None):
    keywords = keywords or ["futbol", "spor haberleri", "transfer", "a spor izle", "a spor canlƒ± izle", "son dakika spor", "a spor canlƒ±", "Canlƒ± ma√ß izle", "spor ekranƒ±"]
    chunks = split_text(text)
    rewritten_chunks = []

    for i, chunk in enumerate(chunks):
        prompt = f"""
        –ü–µ—Ä–µ–ø–∏—à–∏ —ç—Ç–æ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç–∞ (—á–∞—Å—Ç—å {i+1}) –≤ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º, SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å—Ç–∏–ª–µ. –°–æ—Ö—Ä–∞–Ω–∏ —Å–º—ã—Å–ª, –∏—Å–ø–æ–ª—å–∑—É–π –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(keywords)}. –§–æ—Ä–º–∞—Ç: —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤.
        –¢–µ–∫—Å—Ç:
        \"\"\"
        {chunk}
        \"\"\"
        """
        try:
            response = openai.ChatCompletion.create(
                model="gpt-4-turbo",  # –∏–ª–∏ gpt-3.5-turbo
                messages=[{"role": "user", "content": prompt}],
                temperature=0.7,
                max_tokens=4096
            )
            rewritten_chunks.append(response['choices'][0]['message']['content'].strip())
        except Exception as e:
            logger.error(f"‚ùå GPT –æ—à–∏–±–∫–∞ –≤ —á–∞—Å—Ç–∏ {i+1}: {e}")
            return text[:3990]

    full_text = "\n\n".join(rewritten_chunks)

    final_prompt = f"""
    –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    Ba≈ülƒ±k: {title}
    Lead: [–ö—Ä–∞—Ç–∫–∏–π –∞–Ω–æ–Ω—Å, 100‚Äì150 —Å–ª–æ–≤]
    ƒ∞√ßerik: [–¢–µ–∫—Å—Ç —Å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏, 4‚Äì6 –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤]
    Kapanƒ±≈ü: [–í—ã–≤–æ–¥, 50‚Äì100 —Å–ª–æ–≤]

    –ò—Å–ø–æ–ª—å–∑—É–π –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(keywords)}.
    –¢–µ–∫—Å—Ç:
    \"\"\"
    {full_text}
    \"\"\"
    """
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4-turbo",
            messages=[{"role": "user", "content": final_prompt}],
            temperature=0.5,
            max_tokens=4096
        )
        return response['choices'][0]['message']['content'].strip()
    except Exception as e:
        logger.error(f"‚ùå GPT –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
        return full_text

# --- Telegram –æ—Ç–ø—Ä–∞–≤–∫–∞ ---
def send_to_telegram(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    chunks = split_text(text, 4000)
    for chunk in chunks:
        payload = {
            "chat_id": TELEGRAM_CHAT_ID,
            "text": chunk,
            "parse_mode": "HTML"
        }
        try:
            response = requests.post(url, data=payload, timeout=10)
            if response.status_code != 200:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {response.status_code} - {response.text}")
                return False
        except requests.RequestException as e:
            logger.error(f"‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
            return False
    logger.success("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.")
    return True

# --- –ü–∞—Ä—Å–∏–Ω–≥ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
def parse_ajansspor_latest_news(base_url):
    logger.info(f"–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–∞: {base_url}")
    try:
        response = requests.get(base_url, timeout=15)
        response.raise_for_status()
    except requests.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return None, None

    soup = BeautifulSoup(response.content, 'html.parser')
    first_card = soup.find('div', class_='card')
    if not first_card:
        logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –±–ª–æ–∫ —Å –Ω–æ–≤–æ—Å—Ç—å—é.")
        return None, None

    link_tag = first_card.find('a', href=True)
    if not link_tag:
        logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –≤ –±–ª–æ–∫–µ —Å –Ω–æ–≤–æ—Å—Ç—å—é.")
        return None, None

    news_relative_link = link_tag['href']
    full_news_url = f"https://ajansspor.com{news_relative_link}"
    return get_news_details(full_news_url)

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ ---
def get_news_details(news_url):
    logger.info(f"üîç –ü–∞—Ä—Å–∏–º –Ω–æ–≤–æ—Å—Ç—å: {news_url}")
    try:
        news_response = requests.get(news_url, timeout=15)
        news_response.raise_for_status()
    except requests.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏: {e}")
        return None, None

    news_soup = BeautifulSoup(news_response.content, 'html.parser')

    header_tag = news_soup.find('header', class_='news-header') or news_soup.find('h1')
    title = header_tag.get_text(strip=True) if header_tag else "Ba≈ülƒ±ksƒ±z"

    article_texts = []
    content_blocks = news_soup.find_all(['div', 'article'], class_=['article-content', 'content', 'news-body'])
    for block in content_blocks:
        for p in block.find_all('p'):
            text = p.get_text(strip=True)
            if text:
                article_texts.append(text)

    full_text = "\n".join(article_texts)
    if not full_text:
        logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏.")
        return None, None

    keywords = ["futbol", "Ajansspor", "spor haberleri", "transfer haberleri"]
    rewritten_text = rewrite_text_with_gpt_tr(full_text, title, keywords)

    telegram_text = rewritten_text[:3500]
    message = f"<b>{title}</b>\n\n{telegram_text}\n\n<a href='{news_url}'>Kaynak</a>"
    return message, news_url

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    last_link_file = 'last_link.txt'
    last_sent_link = ""
    try:
        with open(last_link_file, 'r') as f:
            last_sent_link = f.read().strip()
            logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Å—ã–ª–∫–∞: {last_sent_link}")
    except FileNotFoundError:
        logger.info("–§–∞–π–ª —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Å—ã–ª–∫–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫.")

    url = "https://ajansspor.com/kategori/16/futbol"
    message, new_link = parse_ajansspor_latest_news(url)

    if not new_link:
        logger.info("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É. –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É.")
        return

    if new_link == last_sent_link:
        logger.info("üî• –ù–æ–≤–æ—Å—Ç—å —Ç–∞ –∂–µ, —á—Ç–æ –∏ –≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
    else:
        logger.info(f"üöÄ –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å! –°—Å—ã–ª–∫–∞: {new_link}")
        if send_to_telegram(message):
            with open(last_link_file, 'w') as f:
                f.write(new_link)
            logger.success("–ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª.")

if __name__ == "__main__":
    main()
